#!/bin/bash/env bash

#
# Filename:         bashlib-vars
# Description:      Variable and file type, value, etc. validation.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
#    test functions
#       -var type validation    good
#       -var comp validation    good
#       -var ref validation     good
#       -var ref modification   pending
#       -file type validation   pending
#       -file comp validation   pending

# <summary> Variable type validation </summary>
# <functions>
    function IsBool
    {
        [[ "$1" == true ]] \
        || [[ "$1" == false ]]
        return "$?"
    }

    function IsInt
    {
        [[ "$1" =~ ^[0-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+$ ]]
        return "$?"
    }

    function IsEnum
    {
        local -n ENUM_REF="$1"
        IsNonZero "${!ENUM_REF[@]}" || return "$?"
        return "$?"
    }

    function IsArray
    {
        IsEnum "$1" || return "$?"
        local -n ENUM_REF="$1"

        for KEY in "${!ENUM_REF[@]}"; do
            IsInt "$KEY" || return 1
        done

        return 0
    }

    function IsList
    {
        IsEnum "$1" || return "$?"
        local -n ENUM_REF="$1"

        for KEY in "${!ENUM_REF[@]}"; do
            IsInt "$KEY" || return 0
        done

        return 1
    }

    function IsNotNull
    {
        [ -n "$1" ]
        return "$?"
    }

    function IsNull
    {
        [ -z "$1" ]
        return "$?"
    }
# </functions>

# <summary> Variable comparative validation </summary>
# <functions>
    function AreEqual
    {
        [[ "$1" == "$2" ]]
        return "$?"
    }

    function AreNotEqual
    {
        [[ "$1" != "$2" ]]
        return "$?"
    }

    function IsDecimal
    {
        [[ "$1" =~ ^[0-9]+[.]+[0-9]$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[.]+[0-9]$ ]]
        return "$?"
    }

    function IsFraction
    {
        [[ "$1" =~ ^[0-9]+[/][1-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[/][1-9]+$ ]] \
        || [[ "$1" =~ ^[0-9]+[/][-][1-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[/][-][1-9]+$ ]]
        return "$?"
    }

    function IsGreater
    {
        [[ "$1" -gt "$2" ]]
        return "$?"
    }

    function IsGreaterOrEqual
    {
        [[ "$1" -ge "$2" ]]
        return "$?"
    }

    function IsLess
    {
        [[ "$1" -lt "$2" ]]
        return "$?"
    }

    function IsLessOrEqual
    {
        [[ "$1" -le "$2" ]]
        return "$?"
    }

    function IsNonZero
    {
        [[ "$1" -ne 0 ]]
        return "$?"
    }

    function IsZero
    {
        [[ "$1" -eq 0 ]]
        return "$?"
    }
# </functions>

# <summary> Variable reference validation </summary>
# <functions>
    function HasKey
    {
        IsNotNull "$2" || return "$?"
        IsNotNull "$1" || return "$?"
        IsEnum "$1" || return "$?"

        local -n ENUM_REF="$1"

        # for KEY in $( eval "echo \"\${!$1[@]}\"" ); do
        for KEY in ${!ENUM_REF[@]}; do
            AreEqual "$KEY" "$2" && return "$?"
        done

        return 1
    }

    function HasValue
    {
        local -n VAR_REF="$1"
        echo "'${!VAR_REF}'"
        [ -v "${!VAR_REF}" ] || IsEnum "$1"
        return "$?"
    }
# </functions>

# <summary> Variable reference modification </summary>
# <functions>
    function AddKey
    {
        HasKey "$1" "$2" || return "$?"
        set $( echo "$1[$2]" ) || return "$?"
        return "$?"
    }

    # function AddValueToKey
    # {
    #     HasKey "$1" "$2" || return "$?"

    #     if IsArray $( echo "$1[$2]" ); then

    #     elif IsList $( echo "$1[$2]" ); then
    #         local -i LEN=$( echo "${\#1[$2]}" )
    #     else
    #         return 1
    #     fi

    #     local -a nested_array=$( echo ${list[$key]})
    #     local -i nested_array_length=${#nested_array[@]}
    #     nested_array[$nested_array_length]="$value"

    #     echo ${nested_array_length}

    #     set $( echo "$1[$2]" ) || return "$?"
    #     return "$?"
    # }

    function RemoveKey
    {
        HasKey "$1" "$2" || return "$?"
        unset $( echo "$1[$2]" ) || return "$?"
        return "$?"
    }

    function ReplaceValueAtKey
    {
        IsNotNull "$3" || return "$?"
        HasKey "$1" "$2" || return "$?"
        local -n LIST_REF="$1"
        LIST_REF[$2]="$3"
        eval "$1=\${LIST_REF[@]}\""
        return "$?"
    }
# </functions>

# <summary> File type validation </summary>
# <functions>
    function FileHasSetGroupId
    {
        [ -g "$1" ]
        return "$?"
    }

    function FileHasSetUserId
    {
        [ -u "$1" ]
        return "$?"
    }

    function FileHasStickyBitId
    {
        [ -k "$1" ]
        return "$?"
    }

    function IsFile
    {
        [ -a "$1" ] || [ -e "$1" ]
        return "$?"
    }

    function IsBlockFile
    {
        [ -b "$1" ]
        return "$?"
    }

    function IsCharacterFile
    {
        [ -c "$1" ]
        return "$?"
    }

    function IsFileExecutable
    {
        [ -x "$1" ]
        return "$?"
    }

    function IsFileModified
    {
        [ -N "$1" ]
        return "$?"
    }

    function IsFileFIFO
    {
        [ -p "$1" ]
        return "$?"
    }

    function IsFileNotEmpty
    {
        [ -s "$1" ]
        return "$?"
    }

    function IsFileOwnedByGroup
    {
        [ -G "$1" ]
        return "$?"
    }

    function IsFileOwnedByUser
    {
        [ -O "$1" ]
        return "$?"
    }

    function IsFileReadable
    {
        [ -r "$1" ]
        return "$?"
    }

    function IsFileSocket
    {
        [ -S "$1" ]
        return "$?"
    }

    function IsFileSymLink
    {
        [ -L "$1" ] || [ -h "$1" ]
        return "$?"
    }

    function IsFileWritable
    {
        [ -w "$1" ]
        return "$?"
    }

    function IsPathFile
    {
        [ -d "$1" ]
        return "$?"
    }

    function IsRegularFile
    {
        [ -f "$1" ]
        return "$?"
    }
# </functions>

# <summary> File comparative validation </summary>
# <functions>
    function AreSame
    {
        [ "$1" -ef "$2" ]
        return "$?"
    }

    function IsNewer
    {
        [ "$1" -nt "$2" ]
        return "$?"
    }

    function IsOlder
    {
        [ "$1" -ot "$2" ]
        return "$?"
    }
# </functions>

# <summary> Presentation </summary>
# <functions>
    function PrintList
    {
        IsEnum "$1" || return "$?"
        local -n ENUM_REF="$1"

        for KEY in "${!ENUM_REF[@]}"; do
            local VALUE=$( eval "echo \"\${$1[$KEY]}\"" )
            echo -e "$KEY\t=> $VALUE"
        done

        return 1
    }
# </functions>