#!/bin/bash/env bash

#
# Filename:         bashlib-vars
# Description:      Variable and file type, value, etc. validation.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
#    test functions
#       -var type validation    good
#       -var comp validation    good
#       -var ref validation     good
#       -var ref validation   pending
#       -file type validation   pending
#       -file comp validation   pending

# <summary> Variable type validation </summary>
# <functions>
    function IsBool
    {
        [[ "$1" == true ]] \
        || [[ "$1" == false ]]
        return "$?"
    }

    function IsInt
    {
        [[ "$1" =~ ^[0-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+$ ]]
        return "$?"
    }

    function IsEnum
    {
        local -r GET_LIST_LENGTH="echo \"\${#$1[@]}\""
        local -i LIST_LENGTH=$( eval "$GET_LIST_LENGTH" )
        IsNonZero "$LIST_LENGTH" || return "$?"
        return "$?"
    }

    function IsArray
    {
        IsEnum "$1" || return "$?"
        local -r GET_KEYS_FROM_LIST="echo \"\${!$1[@]}\""

        for KEY in $( eval "$GET_KEYS_FROM_LIST" ); do
            IsNum "$KEY" || return "$?"
        done

        return 0
    }

    function IsList
    {
        IsEnum "$1" || return "$?"
        local -r GET_KEYS_FROM_LIST="echo \"\${!$1[@]}\""
        local IS_LIST=false

        for KEY in $( eval "$GET_KEYS_FROM_LIST" ); do
            IsNum "$KEY" || IS_LIST=true
        done

        eval "$IS_LIST"
        return "$?"
    }

    function IsNotNull
    {
        [ -n "$1" ]
        return "$?"
    }

    function IsNull
    {
        [ -z "$1" ]
        return "$?"
    }
# </functions>

# <summary> Variable comparative validation </summary>
# <functions>
    function AreEqual
    {
        [[ "$1" == "$2" ]]
        return "$?"
    }

    function AreNotEqual
    {
        [[ "$1" != "$2" ]]
        return "$?"
    }

    function IsDecimal
    {
        [[ "$1" =~ ^[0-9]+[.]+[0-9]$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[.]+[0-9]$ ]]
        return "$?"
    }

    function IsFraction
    {
        [[ "$1" =~ ^[0-9]+[/][1-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[/][1-9]+$ ]] \
        || [[ "$1" =~ ^[0-9]+[/][-][1-9]+$ ]] \
        || [[ "$1" =~ ^[-][0-9]+[/][-][1-9]+$ ]]
        return "$?"
    }

    function IsGreater
    {
        [[ "$1" -gt "$2" ]]
        return "$?"
    }

    function IsGreaterOrEqual
    {
        [[ "$1" -ge "$2" ]]
        return "$?"
    }

    function IsLess
    {
        [[ "$1" -lt "$2" ]]
        return "$?"
    }

    function IsLessOrEqual
    {
        [[ "$1" -le "$2" ]]
        return "$?"
    }

    function IsNonZero
    {
        [[ "$1" -ne 0 ]]
        return "$?"
    }

    function IsZero
    {
        [[ "$1" -eq 0 ]]
        return "$?"
    }
# </functions>

# <summary> Variable reference validation </summary>
# <functions>
    function HasKey
    {
        IsNotNull "$2" || return "$?"
        IsNotNull "$1" || return "$?"
        IsEnum "$1" || return "$?"
        local -r GET_KEYS_FROM_LIST="echo \"\${!$1[@]}\""
        local -r KEY="$2"

        for THIS_KEY in $( eval "$GET_KEYS_FROM_LIST" ); do
            AreEqual "$THIS_KEY" "$KEY" && return "$?"
        done

        return 1
    }

    function HasValue
    {
        local REFERENCE
        local -r GET_REFERENCE='REFERENCE="$1"'
        eval "$GET_REFERENCE"
        [ -v "$REFERENCE" ]
        return "$?"
    }
# </functions>

# <summary> Variable reference modification </summary>
# <functions>
    function InsertValueAtKey
    {
        IsNotNull "$3" || return "$?"
        HasKey "$1" "$2" || return "$?"
        local LIST_REFERENCE
        local -r GET_LIST="LIST_REFERENCE=\"\${$1[@]}\""
        eval "$GET_LIST"
        local -r KEY="$2"
        local -r VALUE="$3"
        LIST_REFERENCE[$KEY]="$VALUE"
        local -r SET_LIST="$1=\${LIST_REFERENCE[@]}\""
        eval "$SET_LIST"
        return "$?"
    }

    function RemoveKey
    {
        HasKey "$1" "$2" || return "$?"
        local LIST_REFERENCE
        local -r GET_LIST="LIST_REFERENCE=\"\${$1[@]}\""
        eval "$GET_LIST"
        local -r KEY="$2"
        unset LIST_REFERENCE[$KEY] || return "$?"
        local -r SET_LIST="$1=\${LIST_REFERENCE[@]}\""
        eval "$SET_LIST"
        return "$?"
    }
# </functions>

# <summary> File type validation </summary>
# <functions>
    function FileHasSetGroupId
    {
        [ -g "$1" ]
        return "$?"
    }

    function FileHasSetUserId
    {
        [ -u "$1" ]
        return "$?"
    }

    function FileHasStickyBitId
    {
        [ -k "$1" ]
        return "$?"
    }

    function IsFile
    {
        [ -a "$1" ] || [ -e "$1" ]
        return "$?"
    }

    function IsBlockFile
    {
        [ -b "$1" ]
        return "$?"
    }

    function IsCharacterFile
    {
        [ -c "$1" ]
        return "$?"
    }

    function IsFileExecutable
    {
        [ -x "$1" ]
        return "$?"
    }

    function IsFileModified
    {
        [ -N "$1" ]
        return "$?"
    }

    function IsFileFIFO
    {
        [ -p "$1" ]
        return "$?"
    }

    function IsFileNotEmpty
    {
        [ -s "$1" ]
        return "$?"
    }

    function IsFileOwnedByGroup
    {
        [ -G "$1" ]
        return "$?"
    }

    function IsFileOwnedByUser
    {
        [ -O "$1" ]
        return "$?"
    }

    function IsFileReadable
    {
        [ -r "$1" ]
        return "$?"
    }

    function IsFileSocket
    {
        [ -S "$1" ]
        return "$?"
    }

    function IsFileSymbolicLink
    {
        [ -L "$1" ] || [ -h "$1" ]
        return "$?"
    }

    function IsFileWritable
    {
        [ -w "$1" ]
        return "$?"
    }

    function IsPathFile
    {
        [ -d "$1" ]
        return "$?"
    }

    function IsRegularFile
    {
        [ -f "$1" ]
        return "$?"
    }
# </functions>

# <summary> File comparative validation </summary>
# <functions>
    function AreSame
    {
        [ "$1" -ef "$2" ]
        return "$?"
    }

    function IsNewer
    {
        [ "$1" -nt "$2" ]
        return "$?"
    }

    function IsOlder
    {
        [ "$1" -ot "$2" ]
        return "$?"
    }
# </functions>